# -*- coding: utf-8 -*-
"""HW3-CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mZ0H-krxcPmfw18PYRf-rjcOwi5Iodjb

# Deep Learning Architectures on MNIST Dataset
"""

!pip install tensorflow
!pip install keras

"""## Get Data"""

from keras.datasets import mnist
import numpy as np
(train_image, train_label) ,(test_image, test_label) = mnist.load_data()

"""## ANN Architecture

### Preprocessing for ANN
"""

from keras.utils import to_categorical
x_train = train_image.reshape(60000, 784)
x_test = test_image.reshape(10000,784)


# coverts class vector to binary class matrix
y_train = to_categorical(train_label)
y_test = to_categorical(test_label)

"""### Create ANN and run model"""

from keras import layers, models
ANN_network = models.Sequential()
ANN_network.add(layers.Dense(128, activation='sigmoid'))
ANN_network.add(layers.Dense(10, activation='sigmoid'))
ANN_network.compile(optimizer='sgd', loss='mse', metrics=['accuracy'])
ANN_network.fit(x_train, y_train, epochs=20, batch_size=16)
ANN_network.summary()

ANN_network.evaluate(x_test, y_test, batch_size=1)

"""## CNN Architecture

### Preprocessing
"""

from keras.utils import to_categorical
x_train = train_image.reshape(-1, 28, 28, 1)
x_test = test_image.reshape(-1, 28, 28, 1)

y_train = to_categorical(train_label)
y_test = to_categorical(test_label)

"""### Create CNN and run model"""

CNN_network = models.Sequential()
CNN_network.add(layers.Conv2D(128,kernel_size=(3,3),activation='relu',input_shape=(28,28,1)))
CNN_network.add(layers.MaxPool2D())
CNN_network.add(layers.Conv2D(64, kernel_size=(3,3),activation='relu', input_shape=(28,28,1))) 
CNN_network.add(layers.MaxPool2D())
CNN_network.add(layers.Flatten())
CNN_network.add(layers.Dense(10, activation='sigmoid'))
CNN_network.compile(optimizer='sgd', loss='mse',metrics=['accuracy'])
CNN_network.fit(x_train, y_train, epochs=20, batch_size=16)
CNN_network.summary()

CNN_network.evaluate(x_test, y_test, batch_size=1)
CNN_network.summary()

"""## Custom Architecture

### Preprocessing
"""

from keras.utils import to_categorical
x_train = train_image.reshape(-1, 28, 28, 1)
x_test = test_image.reshape(-1, 28, 28, 1)

y_train = to_categorical(train_label)
y_test = to_categorical(test_label)

"""### Create custom architecture and run model"""

from keras import layers, models

# custom architecture
CNN_network = models.Sequential()
CNN_network.add(layers.Conv2D(128,kernel_size=(3,3),activation='relu',input_shape=(28,28,1)))
CNN_network.add(layers.MaxPool2D())
CNN_network.add(layers.Conv2D(64, kernel_size=(3,3),activation='relu', input_shape=(28,28,1))) 
CNN_network.add(layers.MaxPool2D())
CNN_network.add(layers.Conv2D(64, kernel_size=(3,3),activation='relu', input_shape=(28,28,1))) 
CNN_network.add(layers.MaxPool2D())
CNN_network.add(layers.Flatten())
CNN_network.add(layers.Dense(10, activation='sigmoid'))
CNN_network.add(layers.Dense(10, activation='sigmoid'))
CNN_network.compile(optimizer='sgd', loss='mse',metrics=['accuracy'])
CNN_network.fit(x_train, y_train, epochs=20, batch_size=16)
CNN_network.summary()

CNN_network.evaluate(x_test, y_test, batch_size=1)
CNN_network.summary()